# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
--------------------------------------------------------------------------------
Nsubjettiness Package
--------------------------------------------------------------------------------

The Nsubjettiness package is based on the physics described in:

   Identifying Boosted Objects with N-subjettiness.
   Jesse Thaler and Ken Van Tilburg.
   JHEP 1103:015 (2011), arXiv:1011.2268.

   Maximizing Boosted Top Identification by Minimizing N-subjettiness. 
   Jesse Thaler and Ken Van Tilburg. 
   JHEP 1202:093 (2012), arXiv:1108.2701.

New in v2.0 is the winner-take-all axis, which is described in:

   Jet Observables Without Jet Algorithms. 
   Daniele Bertolini, Tucker Chan, and Jesse Thaler. 
   JHEP 1404:013 (2014), arXiv:1310.7584.

   Jet Shapes with the Broadening Axis. 
   Andrew J. Larkoski, Duff Neill, and Jesse Thaler. 
   JHEP 1404:017 (2014), arXiv:1401.2158.

   Unpublished work by Gavin Salam

New in v2.2 are new measures used in the XCone jet algorithm, described in:

   XCone: N-jettiness as an Exclusive Cone Jet Algorithm.
   Iain W. Stewart, Frank J. Tackmann, Jesse Thaler,
   Christopher K. Vermilion, and Thomas F. Wilkason.
   arXiv:1508.01516.

   Resolving Boosted Jets with XCone.
   Jesse Thaler and Thomas F. Wilkason.
   arXiv:1508.01518.

--------------------------------------------------------------------------------
Core Classes
--------------------------------------------------------------------------------

There are various ways to access N-(sub)jettiness variables, described
in more detail below:

Nsubjettiness       [Nsubjettiness.hh]:
   A FunctionOfPseudoJet<double> interface to measure the
   N-subjettiness jet shape
   (Recommended for most users)

NsubjettinessRatio  [Nsubjettiness.hh]:
   A FunctionOfPseudoJet<double> interface to measure ratios of
   two different N-subjettiness (i.e. tau3/tau2)
   (Recommended for most users)

XConePlugin         [XConePlugin.hh]:
   A FastJet plugin for using the XCone jet algorithm.
   (Recommended for most users)

NjettinessPlugin    [NjettinessPlugin.hh]:
   A FastJet plugin for finding jets by minimizing N-jettiness.
   Same basic philosophy as XCone, but many more options.
   (Recommended for advanced users only.)

Njettiness          [Njettiness.hh]:
   Access to the core Njettiness code.
   (Not recommended for users, since the interface might change)

The code assumes that you have FastJet 3, but does not (yet) require FastJet 3.1

--------------------------------------------------------------------------------
Basic Usage: Nsubjettiness and NsubjettinessRatio  [Nsubjettiness.hh]
--------------------------------------------------------------------------------

Most users will only need to use the Nsubjettiness class.  The basic
functionality is given by:

   Nsubjettiness nSub(N, AxesDefinition, MeasureDefinition)
   // N specifies the number of (sub) jets to measure
   // AxesDefinition is WTA_KT_Axes, OnePass_KT_Axes, etc.
   // MeasureDefinition is UnnormalizedMeasure(beta),
   //                      NormalizedMeasure(beta,R0), etc.
      
   // get tau value
   double tauN = nSub.result(PseudoJet);

Also available are ratios of N-subjettiness values
    NsubjettinessRatio nSubRatio(N, M, AxesDefinition,
                                 MeasureDefinition)
    // N and M give tau_N / tau_M, all other options the same

For example, if you just want the tau_2/tau_1 value of a jet, using recommended
parameter choices, do this:

    PseudoJet this_jet = /*from your favorite jet algorithm*/;
    double beta = 1.0;
    NsubjettinessRatio nSub21(2,1,
                              OnePass_WTA_KT_Axes(),
                              UnnormalizedMeasure(beta));
    double tau21 = nSub21(this_jet);

--------------------------------------------------------------------------------
AxesDefinition  [NjettinessDefinition.hh]
--------------------------------------------------------------------------------

N-(sub)jettiness requires choosing axes as well as a measure (see below). There
are a number of axes choices available to the user, though modes with a (*) are
recommended. Arguments in parentheses are parameters that the user must set.

Axes can be found using standard recursive clustering procedures.  New in v2 is
the option to use the "winner-take-all" recombination scheme:
(*) KT_Axes          // exclusive kt axes
    CA_Axes          // exclusive ca axes
    AntiKT_Axes(R0)  // inclusive hardest axes with antikt, R0 = radius
(*) WTA_KT_Axes      // exclusive kt with winner-take-all recombination
    WTA_CA_Axes      // exclusive ca with winner-take-all recombination

New in v2.2 are generalized recombination/clustering schemes:
    GenET_GenKT_Axes(delta, p, R0 = inf)
    WTA_GenKT_Axes(p, R0 = inf)
    GenKT_Axes(p, R0 = inf)
Here, delta > 0 labels the generalized ET recombination scheme (delta = 1 for
standard ET scheme, delta = 2 for ET^2 scheme, delta = infinity for WTA scheme)
p >= 0 labels the generalized KT clustering metric (p = 0 for ca, p = 1 for kt),
R0 is the radius parameter, and the clustering is run in exclusive mode.  The
GenKT_Axes mode uses standard E-scheme recombination.  By default the value of
R0 is set to "infinity", namely fastjet::JetDefinition::max_allowable_R.

Also new in v2.2 is option of identifying nExtra axes through exclusive
clustering and then looking at all (N + nExtra) choose N axes and finding the 
one that gives the smallest N-(sub)jettiness value:
    Comb_GenET_GenKT_Axes(nExtra, delta, p, R0 = inf)
    Comb_WTA_GenKT_Axes(nExtra, p, R0 = inf)
    Comb_GenKT_Axes(nExtra, p, R0 = inf)
These modes are not recommended for reasons of speed.

Starting from any set of seed axes, one can run a minimization routine to find
a (local) minimum of N-(sub)jettiness.  Note that the one-pass minimization
routine is tied to the choice of MeasureDefinition.
(*) OnePass_KT_Axes          // one-pass minimization from kt starting point
    OnePass_CA_Axes          // one-pass min. from ca starting point
    OnePass_AntiKT(R0)       // one-pass min. from antikt starting point,R0=rad
(*) OnePass_WTA_KT_Axes      // one-pass min. from wta_kt starting point
    OnePass_WTA_CA_Axes      // one-pass min. from wta_ca starting point
    OnePass_GenET_GenKT_Axes(delta, p, R0 = inf) // one-pass min. from GenET/KT
    OnePass_WTA_GenKT_Axes(p, R0 = inf)          // one-pass min from WTA/GenKT
    OnePass_GenKT_Axes(p, R0 = inf)              // one-pass min from GenKT

For one-pass minimization, OnePass_CA_Axes and OnePass_WTA_CA_Axes are not
recommended as they provide a poor choice of seed axes.

In general, it is difficult to find the global minimum, but this mode attempts
to do so:
    MultiPass_Axes(NPass) // axes that (attempt to) minimize N-subjettiness
                          // (NPass = 100 is typical)
This does multi-pass minimization from KT_Axes starting points.

Finally, one can set manual axes:
    Manual_Axes              // set your own axes with setAxes()
    OnePass_Manual_Axes      // one-pass minimization from manual starting point
    MultiPass_Manual_Axes(Npass) // multi-pass min. from manual

If one wants to change the number of passes used by any of the axes finders, one
can call the function
    setNPass(NPass,nAttempts,accuracy,noise_range)
where NPass = 0 only uses the seed axes, NPass = 1 is one-pass minimization, and
NPass = 100 is the default multi-pass.  nAttempts is the number of iterations to
use in each pass, accuracy is how close to the minimum one tries to get, and
noise_range is how much in rapidity/azimuth the random axes are jiggled.

For most cases, running with OnePass_KT_Axes or OnePass_WTA_KT_Axes gives
reasonable results (and the results are IRC safe).  Because it uses random
number seeds, MultiPass_Axes is not IRC safe (and the code is rather slow).
Note that for the minimization routines, beta = 1.1 is faster than beta = 1,
with comparable performance.

--------------------------------------------------------------------------------
MeasureDefinition  [NjettinessDefinition.hh]
--------------------------------------------------------------------------------

The value of N-(sub)jettiness depends crucially on the choice of measure.  Each
measure has a different number of parameters, so one has to be careful when
switching between measures  The one indicated by (*) is the one recommended for
use by users new to Nsubjettiness.

The original N-subjettiness measures are:
    NormalizedMeasure(beta,R0)  //default normalized measure with
                                //parameters beta and R0 (dimensionless)
(*) UnnormalizedMeasure(beta)   //default unnormalized measure with just
                                //parameter beta (dimensionful)

There are also measures that incorporate a radial cutoff:
    NormalizedCutoffMeasure(beta,R0,Rcutoff) //normalized measure with
                                             //additional Rcutoff
    UnnormalizedCutoffMeasure(beta,Rcutoff)  //unnormalized measure with
                                             //additional Rcutoff
                                             
For all of the above measures, there is an optional argument to change from the
ordinary pt_R distance measure recommended for pp collisions to an 
E_theta distance measure recommended for ee collisions.  There are also
lorentz_dot and perp_lorentz_dot distance measures recommended only for
advanced users.

New for v2.2 is a set of measures defined in arXiv:1508.01516.  First, there is
the "conical measure":

    ConicalMeasure(beta,R0) // same jets as UnnormalizedCutoffMeasure
                            // but differs in normalization and specifics
                            // of one-pass minimization

Next, there is the geometric measure (as well as a modified version to yield
more conical jet regions):

    OriginalGeometricMeasure(R) // not recommended for analysis
    ModifiedGeometricMeasure(R)

(Prior to v2.2, there was a "GeometricMeasure" which unfortunately had the wrong
definition.  These have been commented out in the code as
"DeprecatedGeometricMeasure" and "DeprecatedGeometricCutoffMeasure", but they
should not be used.)

Next, there is a "conical geometric" measure:

    ConicalGeometricMeasure(beta, gamma, Rcutoff)

This is a hybrid between the conical and geometric measures and is the basis for
the XCone jet algorithm.  Finally, setting to the gamma = 1 default gives the
XCone default measure, which is used in the XConePlugin jet finder

(*)  XConeMeasure(beta,Rcutoff)
    
where beta = 2 is the recommended default value and beta = 1 is the recoil-free
default.

--------------------------------------------------------------------------------
A note on beta dependence
--------------------------------------------------------------------------------

The angular exponent in N-subjettiness is called beta.  The original
N-subjettiness paper advocated beta = 1, but it is now understood that different
beta values can be useful in different contexts.  The two main choices are:

beta = 1:  aka broadening/girth/width measure
   the axes behave like the "median" in that they point to the hardest cluster
   wta_kt_axes are approximately the same as minimizing beta = 1 measure

beta = 2:  aka thrust/mass measure
   the axes behave like the "mean" in that they point along the jet momentum
   kt_axes are approximately the same as minimizing beta = 2 measure

N.B. The minimization routines are only valid for 1 < beta < 3.

For quark/gluon discrimination with N = 1, beta~0.2 with wta_kt_axes appears
to be a good choice. 

--------------------------------------------------------------------------------
XConePlugin  [XConePlugin.hh]
--------------------------------------------------------------------------------

The XCone FastJet plugin is an exclusive cone jet finder which yields a
fixed N number of jets which approximately conical boundaries. The algorithm
finds N axes, and jets are simply the sum of particles closest to a given axis
(or unclustered if they are closest to the beam).  Unlike the NjettinessPlugin
below, the user is restricted to using the XConeMeasure. 

   XConePlugin plugin(N,R,beta=2);
   JetDefinition def(&plugin);
   ClusterSequence cs(vector<PseudoJet>,def);
   vector<PseudoJet> jets = cs.inclusive_jets();

Note that despite being an exclusive jet algorithm, one finds the jets using the
inclusive_jets() call.

The AxesDefinition and MeasureDefinition are defaulted in this measure to 
OnePass_GenET_GenKT_Axes and XConeMeasure, respectively. The parameters chosen 
for the OnePass_GenET_GenKT_Axes are defined according to the chosen value of
beta as delta = 1/(beta - 1) and p = 1/beta. These have been shown to give the
optimal choice of seed axes. The R value for finding the axes is chosen to be
the same as the R for the jet algorithm, although in principle, these two radii
could be different. 

N.B.:  The order of the R, beta arguments is *reversed* from the XConeMeasure
itself, since this ordering is the more natural one to use for Plugins.  We
apologize in advance for any confusion this might cause.

--------------------------------------------------------------------------------
Advanced Usage:  NjettinessPlugin  [NjettinessPlugin.hh]
--------------------------------------------------------------------------------

Same as the XConePlugin, but the axes finding methods and measures are the same
as for Nsubjettiness, allowing more flexibility.

   NjettinessPlugin plugin(N, AxesDefinition, MeasureDefinition);
   JetDefinition def(&plugin);
   ClusterSequence cs(vector<PseudoJet>,def);
   vector<PseudoJet> jets = cs.inclusive_jets();

--------------------------------------------------------------------------------
Very Advanced Usage:  Njettiness  [Njettiness.hh]
--------------------------------------------------------------------------------

Most users will want to use the Nsubjettiness or NjettinessPlugin classes to
access N-(sub)jettiness information.  For direct access to the Njettiness class,
one can use Njettiness.hh directly. This class is in constant evolution, so
users who wish to extend its functionality should contact the authors first.

--------------------------------------------------------------------------------
TauComponents  [MeasureDefinition.hh]
--------------------------------------------------------------------------------

For most users, they will only need the value of N-subjettiness (i.e. tau)
itself.  For advanced users, they can access individual tau components (i.e. 
the individual numerator pieces, the denominator, etc.)  

   TauComponents tauComp = nSub.component_result(jet);
   vector<double> numer = tauComp.jet_pieces_numerator(); //tau for each subjet
   double denom = tauComp.denominator();  //normalization factor

--------------------------------------------------------------------------------
Extra Recombiners  [ExtraRecombiners.hh]
--------------------------------------------------------------------------------

New in v2.0 are winner-take-all axes.  (These have now been included in 
FastJet 3.1, but we have left the code here to allow the plugin to work under
FJ 3.0).  These axes are found with the help of the WinnerTakeAllRecombiner.
This class defines a new recombination scheme for clustering particles. This
scheme recombines two PseudoJets into a PseudoJet with pT of the sum of the two
input PseudoJet pTs and direction of the harder PseudoJet.  This is a
"recoil-free" recombination scheme that guarantees that the axes is aligned with
one of the input particles. It is IRC safe.  Axes found with the standard
E-scheme recombiner at similar to the beta = 2 minimization, while
winner-take-all is similar to the beta = 1 measure.

New in v2.2 is the GeneralEtSchemeRecombiner, as defined in arxiv:1506.XXXX.
This functions similarly to the Et-scheme defined in Fastjet, but the reweighting
of the sum of rap and phi is parameterized by an exponent delta. Thus, delta = 1
is the normal Et-scheme recombination, delta = 2 is Et^2 recombination, and
delta = infinity is the winner-take-all recombination. This recombination scheme
is used in GenET_GenKT_Axes, and we find that optimal seed axes for minimization
can be found by using delta = 1/(beta - 1). 

Note that the WinnerTakeAllRecombiner can be used outside of Nsubjettiness
itself for jet finding.  For example, the direction of anti-kT jets found
with the WinnerTakeAllRecombiner is particularly robust against soft jet
contamination.  That said, this functionality is now included in FJ 3.1, so this
code is likely to be deprecated in a future version.

--------------------------------------------------------------------------------
Technical Details
--------------------------------------------------------------------------------

In general, the user will never need access to these header files.  Here is a
brief description about how they are used to help the calculation of
N-(sub)jettiness:

AxesDefinition.hh:

The AxesDefinition class (and derived classes) defines the axes used in the
calculation of N-(sub)jettiness.  These axes can be defined from the exclusive
jets from a kT or CA algorithm, the hardest jets from an anti-kT algorithm,
manually, or from minimization of N-jettiness.  In the future, the user will be
able to write their own axes finder, though currently the interface is still
evolving.  At the moment, the user should stick to the options allowed by
AxesDefinition.

MeasureDefinition.hh:

The MeasureDefinition class (and derived classes) defines the measure by which
N-(sub)jettiness is calculated. This measure is calculated between each
particle and its corresponding axis, and then summed and normalized to
produce N-(sub)jettiness. The default measure for this calculation is
pT*dR^beta, where dR is the rapidity-azimuth distance between the particle
and its axis, and beta is the angular exponent.  Again, in the future the user
will be able to write their own measures, but for the time being, only the
predefined MeasureDefinition values should be used.  Note that the one-pass
minimization algorithms are defined within MeasureDefinition, since they are
measure specific.

--------------------------------------------------------------------------------
Known Issues
--------------------------------------------------------------------------------

-- The MultiPass_Axes mode gives different answers on different runs, since
   random numbers are used.
-- For the default measures, in rare cases, one pass minimization can give a 
   larger value of Njettiness than without minimization. The reason is due 
   to the fact that axes in default measure are not defined as light-like
-- Nsubjettiness is not thread safe, since there are mutables in Njettiness.
-- If the AxesDefinition does not find N axes, then it adds zero vectors to the
   list of axes to get the total up to N.  This can lead to unpredictable
   results (including divide by zero issues), and a warning is thrown to alert
   the user.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nsubjettiness
else:
    import _nsubjettiness

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _nsubjettiness.SWIG_PyInstanceMethod_New
_swig_new_static_method = _nsubjettiness.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import fastjet

from fastjet import FastJetError

__version__ = '2.2.5a2'

class GeneralEtSchemeRecombiner(object):
    r"""Proxy of C++ fastjet::contrib::GeneralEtSchemeRecombiner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, delta):
        r"""__init__(GeneralEtSchemeRecombiner self, double delta) -> GeneralEtSchemeRecombiner"""
        _nsubjettiness.GeneralEtSchemeRecombiner_swiginit(self, _nsubjettiness.new_GeneralEtSchemeRecombiner(delta))
    description = _swig_new_instance_method(_nsubjettiness.GeneralEtSchemeRecombiner_description)
    recombine = _swig_new_instance_method(_nsubjettiness.GeneralEtSchemeRecombiner_recombine)
    __swig_destroy__ = _nsubjettiness.delete_GeneralEtSchemeRecombiner

# Register GeneralEtSchemeRecombiner in _nsubjettiness:
_nsubjettiness.GeneralEtSchemeRecombiner_swigregister(GeneralEtSchemeRecombiner)

class WinnerTakeAllRecombiner(object):
    r"""Proxy of C++ fastjet::contrib::WinnerTakeAllRecombiner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, alpha=1.0):
        r"""__init__(WinnerTakeAllRecombiner self, double alpha=1.0) -> WinnerTakeAllRecombiner"""
        _nsubjettiness.WinnerTakeAllRecombiner_swiginit(self, _nsubjettiness.new_WinnerTakeAllRecombiner(alpha))
    description = _swig_new_instance_method(_nsubjettiness.WinnerTakeAllRecombiner_description)
    recombine = _swig_new_instance_method(_nsubjettiness.WinnerTakeAllRecombiner_recombine)
    __swig_destroy__ = _nsubjettiness.delete_WinnerTakeAllRecombiner

# Register WinnerTakeAllRecombiner in _nsubjettiness:
_nsubjettiness.WinnerTakeAllRecombiner_swigregister(WinnerTakeAllRecombiner)

UNDEFINED_SHAPE = _nsubjettiness.UNDEFINED_SHAPE

UNNORMALIZED_JET_SHAPE = _nsubjettiness.UNNORMALIZED_JET_SHAPE

NORMALIZED_JET_SHAPE = _nsubjettiness.NORMALIZED_JET_SHAPE

UNNORMALIZED_EVENT_SHAPE = _nsubjettiness.UNNORMALIZED_EVENT_SHAPE

NORMALIZED_EVENT_SHAPE = _nsubjettiness.NORMALIZED_EVENT_SHAPE

class TauComponents(object):
    r"""Proxy of C++ fastjet::contrib::TauComponents class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TauComponents self) -> TauComponents
        __init__(TauComponents self, fastjet::contrib::TauMode tau_mode, std::vector< double,std::allocator< double > > const & jet_pieces_numerator, double beam_piece_numerator, double denominator, vectorPJ jets, vectorPJ axes) -> TauComponents
        """
        _nsubjettiness.TauComponents_swiginit(self, _nsubjettiness.new_TauComponents(*args))
    has_denominator = _swig_new_instance_method(_nsubjettiness.TauComponents_has_denominator)
    has_beam = _swig_new_instance_method(_nsubjettiness.TauComponents_has_beam)
    tau = _swig_new_instance_method(_nsubjettiness.TauComponents_tau)
    jet_pieces = _swig_new_instance_method(_nsubjettiness.TauComponents_jet_pieces)
    beam_piece = _swig_new_instance_method(_nsubjettiness.TauComponents_beam_piece)
    jet_pieces_numerator = _swig_new_instance_method(_nsubjettiness.TauComponents_jet_pieces_numerator)
    beam_piece_numerator = _swig_new_instance_method(_nsubjettiness.TauComponents_beam_piece_numerator)
    numerator = _swig_new_instance_method(_nsubjettiness.TauComponents_numerator)
    denominator = _swig_new_instance_method(_nsubjettiness.TauComponents_denominator)
    total_jet = _swig_new_instance_method(_nsubjettiness.TauComponents_total_jet)
    jets = _swig_new_instance_method(_nsubjettiness.TauComponents_jets)
    axes = _swig_new_instance_method(_nsubjettiness.TauComponents_axes)
    __swig_destroy__ = _nsubjettiness.delete_TauComponents

# Register TauComponents in _nsubjettiness:
_nsubjettiness.TauComponents_swigregister(TauComponents)

class TauPartition(object):
    r"""Proxy of C++ fastjet::contrib::TauPartition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TauPartition self) -> TauPartition
        __init__(TauPartition self, int n_jet) -> TauPartition
        """
        _nsubjettiness.TauPartition_swiginit(self, _nsubjettiness.new_TauPartition(*args))
    push_back_jet = _swig_new_instance_method(_nsubjettiness.TauPartition_push_back_jet)
    push_back_beam = _swig_new_instance_method(_nsubjettiness.TauPartition_push_back_beam)
    jet = _swig_new_instance_method(_nsubjettiness.TauPartition_jet)
    beam = _swig_new_instance_method(_nsubjettiness.TauPartition_beam)
    jets = _swig_new_instance_method(_nsubjettiness.TauPartition_jets)
    jet_list = _swig_new_instance_method(_nsubjettiness.TauPartition_jet_list)
    beam_list = _swig_new_instance_method(_nsubjettiness.TauPartition_beam_list)
    jets_list = _swig_new_instance_method(_nsubjettiness.TauPartition_jets_list)
    __swig_destroy__ = _nsubjettiness.delete_TauPartition

# Register TauPartition in _nsubjettiness:
_nsubjettiness.TauPartition_swigregister(TauPartition)

class NjettinessExtras(TauComponents):
    r"""Proxy of C++ fastjet::contrib::NjettinessExtras class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, tau_components, cluster_hist_indices):
        r"""__init__(NjettinessExtras self, TauComponents tau_components, std::vector< int,std::allocator< int > > cluster_hist_indices) -> NjettinessExtras"""
        _nsubjettiness.NjettinessExtras_swiginit(self, _nsubjettiness.new_NjettinessExtras(tau_components, cluster_hist_indices))
    tau = _swig_new_instance_method(_nsubjettiness.NjettinessExtras_tau)
    tau_piece = _swig_new_instance_method(_nsubjettiness.NjettinessExtras_tau_piece)
    axis = _swig_new_instance_method(_nsubjettiness.NjettinessExtras_axis)
    has_njettiness_extras = _swig_new_instance_method(_nsubjettiness.NjettinessExtras_has_njettiness_extras)
    subTaus = _swig_new_instance_method(_nsubjettiness.NjettinessExtras_subTaus)
    totalTau = _swig_new_instance_method(_nsubjettiness.NjettinessExtras_totalTau)
    subTau = _swig_new_instance_method(_nsubjettiness.NjettinessExtras_subTau)
    beamTau = _swig_new_instance_method(_nsubjettiness.NjettinessExtras_beamTau)
    __swig_destroy__ = _nsubjettiness.delete_NjettinessExtras

# Register NjettinessExtras in _nsubjettiness:
_nsubjettiness.NjettinessExtras_swigregister(NjettinessExtras)

njettiness_extras = _nsubjettiness.njettiness_extras
class MeasureDefinition(object):
    r"""Proxy of C++ fastjet::contrib::MeasureDefinition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    description = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_description)
    create = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_create)
    jet_distance_squared = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_jet_distance_squared)
    beam_distance_squared = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_beam_distance_squared)
    jet_numerator = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_jet_numerator)
    beam_numerator = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_beam_numerator)
    denominator = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_denominator)
    get_one_pass_axes = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_get_one_pass_axes)
    result = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_result)
    __call__ = _swig_new_instance_method(_nsubjettiness.MeasureDefinition___call__)
    component_result = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_component_result)
    get_partition = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_get_partition)
    component_result_from_partition = _swig_new_instance_method(_nsubjettiness.MeasureDefinition_component_result_from_partition)
    __swig_destroy__ = _nsubjettiness.delete_MeasureDefinition

# Register MeasureDefinition in _nsubjettiness:
_nsubjettiness.MeasureDefinition_swigregister(MeasureDefinition)

pt_R = _nsubjettiness.pt_R

E_theta = _nsubjettiness.E_theta

lorentz_dot = _nsubjettiness.lorentz_dot

perp_lorentz_dot = _nsubjettiness.perp_lorentz_dot

class DefaultMeasure(MeasureDefinition):
    r"""Proxy of C++ fastjet::contrib::DefaultMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    description = _swig_new_instance_method(_nsubjettiness.DefaultMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.DefaultMeasure_create)
    jet_distance_squared = _swig_new_instance_method(_nsubjettiness.DefaultMeasure_jet_distance_squared)
    beam_distance_squared = _swig_new_instance_method(_nsubjettiness.DefaultMeasure_beam_distance_squared)
    jet_numerator = _swig_new_instance_method(_nsubjettiness.DefaultMeasure_jet_numerator)
    beam_numerator = _swig_new_instance_method(_nsubjettiness.DefaultMeasure_beam_numerator)
    denominator = _swig_new_instance_method(_nsubjettiness.DefaultMeasure_denominator)
    get_one_pass_axes = _swig_new_instance_method(_nsubjettiness.DefaultMeasure_get_one_pass_axes)
    __swig_destroy__ = _nsubjettiness.delete_DefaultMeasure

# Register DefaultMeasure in _nsubjettiness:
_nsubjettiness.DefaultMeasure_swigregister(DefaultMeasure)

class NormalizedCutoffMeasure(DefaultMeasure):
    r"""Proxy of C++ fastjet::contrib::NormalizedCutoffMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(NormalizedCutoffMeasure self, double beta, double R0, double Rcutoff, fastjet::contrib::DefaultMeasureType measure_type=pt_R) -> NormalizedCutoffMeasure"""
        _nsubjettiness.NormalizedCutoffMeasure_swiginit(self, _nsubjettiness.new_NormalizedCutoffMeasure(*args))
    description = _swig_new_instance_method(_nsubjettiness.NormalizedCutoffMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.NormalizedCutoffMeasure_create)
    __swig_destroy__ = _nsubjettiness.delete_NormalizedCutoffMeasure

# Register NormalizedCutoffMeasure in _nsubjettiness:
_nsubjettiness.NormalizedCutoffMeasure_swigregister(NormalizedCutoffMeasure)

class NormalizedMeasure(NormalizedCutoffMeasure):
    r"""Proxy of C++ fastjet::contrib::NormalizedMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(NormalizedMeasure self, double beta, double R0, fastjet::contrib::DefaultMeasureType measure_type=pt_R) -> NormalizedMeasure"""
        _nsubjettiness.NormalizedMeasure_swiginit(self, _nsubjettiness.new_NormalizedMeasure(*args))
    description = _swig_new_instance_method(_nsubjettiness.NormalizedMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.NormalizedMeasure_create)
    __swig_destroy__ = _nsubjettiness.delete_NormalizedMeasure

# Register NormalizedMeasure in _nsubjettiness:
_nsubjettiness.NormalizedMeasure_swigregister(NormalizedMeasure)

class UnnormalizedCutoffMeasure(DefaultMeasure):
    r"""Proxy of C++ fastjet::contrib::UnnormalizedCutoffMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(UnnormalizedCutoffMeasure self, double beta, double Rcutoff, fastjet::contrib::DefaultMeasureType measure_type=pt_R) -> UnnormalizedCutoffMeasure"""
        _nsubjettiness.UnnormalizedCutoffMeasure_swiginit(self, _nsubjettiness.new_UnnormalizedCutoffMeasure(*args))
    description = _swig_new_instance_method(_nsubjettiness.UnnormalizedCutoffMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.UnnormalizedCutoffMeasure_create)
    __swig_destroy__ = _nsubjettiness.delete_UnnormalizedCutoffMeasure

# Register UnnormalizedCutoffMeasure in _nsubjettiness:
_nsubjettiness.UnnormalizedCutoffMeasure_swigregister(UnnormalizedCutoffMeasure)

class UnnormalizedMeasure(UnnormalizedCutoffMeasure):
    r"""Proxy of C++ fastjet::contrib::UnnormalizedMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(UnnormalizedMeasure self, double beta, fastjet::contrib::DefaultMeasureType measure_type=pt_R) -> UnnormalizedMeasure"""
        _nsubjettiness.UnnormalizedMeasure_swiginit(self, _nsubjettiness.new_UnnormalizedMeasure(*args))
    description = _swig_new_instance_method(_nsubjettiness.UnnormalizedMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.UnnormalizedMeasure_create)
    __swig_destroy__ = _nsubjettiness.delete_UnnormalizedMeasure

# Register UnnormalizedMeasure in _nsubjettiness:
_nsubjettiness.UnnormalizedMeasure_swigregister(UnnormalizedMeasure)

class ConicalMeasure(MeasureDefinition):
    r"""Proxy of C++ fastjet::contrib::ConicalMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, beta, Rcutoff):
        r"""__init__(ConicalMeasure self, double beta, double Rcutoff) -> ConicalMeasure"""
        _nsubjettiness.ConicalMeasure_swiginit(self, _nsubjettiness.new_ConicalMeasure(beta, Rcutoff))
    description = _swig_new_instance_method(_nsubjettiness.ConicalMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.ConicalMeasure_create)
    jet_distance_squared = _swig_new_instance_method(_nsubjettiness.ConicalMeasure_jet_distance_squared)
    beam_distance_squared = _swig_new_instance_method(_nsubjettiness.ConicalMeasure_beam_distance_squared)
    jet_numerator = _swig_new_instance_method(_nsubjettiness.ConicalMeasure_jet_numerator)
    beam_numerator = _swig_new_instance_method(_nsubjettiness.ConicalMeasure_beam_numerator)
    denominator = _swig_new_instance_method(_nsubjettiness.ConicalMeasure_denominator)
    __swig_destroy__ = _nsubjettiness.delete_ConicalMeasure

# Register ConicalMeasure in _nsubjettiness:
_nsubjettiness.ConicalMeasure_swigregister(ConicalMeasure)

class OriginalGeometricMeasure(MeasureDefinition):
    r"""Proxy of C++ fastjet::contrib::OriginalGeometricMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Rcutoff):
        r"""__init__(OriginalGeometricMeasure self, double Rcutoff) -> OriginalGeometricMeasure"""
        _nsubjettiness.OriginalGeometricMeasure_swiginit(self, _nsubjettiness.new_OriginalGeometricMeasure(Rcutoff))
    description = _swig_new_instance_method(_nsubjettiness.OriginalGeometricMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.OriginalGeometricMeasure_create)
    jet_numerator = _swig_new_instance_method(_nsubjettiness.OriginalGeometricMeasure_jet_numerator)
    beam_numerator = _swig_new_instance_method(_nsubjettiness.OriginalGeometricMeasure_beam_numerator)
    denominator = _swig_new_instance_method(_nsubjettiness.OriginalGeometricMeasure_denominator)
    __swig_destroy__ = _nsubjettiness.delete_OriginalGeometricMeasure

# Register OriginalGeometricMeasure in _nsubjettiness:
_nsubjettiness.OriginalGeometricMeasure_swigregister(OriginalGeometricMeasure)

class ModifiedGeometricMeasure(MeasureDefinition):
    r"""Proxy of C++ fastjet::contrib::ModifiedGeometricMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Rcutoff):
        r"""__init__(ModifiedGeometricMeasure self, double Rcutoff) -> ModifiedGeometricMeasure"""
        _nsubjettiness.ModifiedGeometricMeasure_swiginit(self, _nsubjettiness.new_ModifiedGeometricMeasure(Rcutoff))
    description = _swig_new_instance_method(_nsubjettiness.ModifiedGeometricMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.ModifiedGeometricMeasure_create)
    jet_numerator = _swig_new_instance_method(_nsubjettiness.ModifiedGeometricMeasure_jet_numerator)
    beam_numerator = _swig_new_instance_method(_nsubjettiness.ModifiedGeometricMeasure_beam_numerator)
    denominator = _swig_new_instance_method(_nsubjettiness.ModifiedGeometricMeasure_denominator)
    __swig_destroy__ = _nsubjettiness.delete_ModifiedGeometricMeasure

# Register ModifiedGeometricMeasure in _nsubjettiness:
_nsubjettiness.ModifiedGeometricMeasure_swigregister(ModifiedGeometricMeasure)

class ConicalGeometricMeasure(MeasureDefinition):
    r"""Proxy of C++ fastjet::contrib::ConicalGeometricMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, jet_beta, beam_gamma, Rcutoff):
        r"""__init__(ConicalGeometricMeasure self, double jet_beta, double beam_gamma, double Rcutoff) -> ConicalGeometricMeasure"""
        _nsubjettiness.ConicalGeometricMeasure_swiginit(self, _nsubjettiness.new_ConicalGeometricMeasure(jet_beta, beam_gamma, Rcutoff))
    description = _swig_new_instance_method(_nsubjettiness.ConicalGeometricMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.ConicalGeometricMeasure_create)
    jet_distance_squared = _swig_new_instance_method(_nsubjettiness.ConicalGeometricMeasure_jet_distance_squared)
    beam_distance_squared = _swig_new_instance_method(_nsubjettiness.ConicalGeometricMeasure_beam_distance_squared)
    jet_numerator = _swig_new_instance_method(_nsubjettiness.ConicalGeometricMeasure_jet_numerator)
    beam_numerator = _swig_new_instance_method(_nsubjettiness.ConicalGeometricMeasure_beam_numerator)
    denominator = _swig_new_instance_method(_nsubjettiness.ConicalGeometricMeasure_denominator)
    __swig_destroy__ = _nsubjettiness.delete_ConicalGeometricMeasure

# Register ConicalGeometricMeasure in _nsubjettiness:
_nsubjettiness.ConicalGeometricMeasure_swigregister(ConicalGeometricMeasure)

class XConeMeasure(ConicalGeometricMeasure):
    r"""Proxy of C++ fastjet::contrib::XConeMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, jet_beta, R):
        r"""__init__(XConeMeasure self, double jet_beta, double R) -> XConeMeasure"""
        _nsubjettiness.XConeMeasure_swiginit(self, _nsubjettiness.new_XConeMeasure(jet_beta, R))
    description = _swig_new_instance_method(_nsubjettiness.XConeMeasure_description)
    create = _swig_new_instance_method(_nsubjettiness.XConeMeasure_create)
    __swig_destroy__ = _nsubjettiness.delete_XConeMeasure

# Register XConeMeasure in _nsubjettiness:
_nsubjettiness.XConeMeasure_swigregister(XConeMeasure)

class LightLikeAxis(object):
    r"""Proxy of C++ fastjet::contrib::LightLikeAxis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LightLikeAxis self) -> LightLikeAxis
        __init__(LightLikeAxis self, double my_rap, double my_phi, double my_weight, double my_mom) -> LightLikeAxis
        """
        _nsubjettiness.LightLikeAxis_swiginit(self, _nsubjettiness.new_LightLikeAxis(*args))
    rap = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_rap)
    phi = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_phi)
    weight = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_weight)
    mom = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_mom)
    set_rap = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_set_rap)
    set_phi = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_set_phi)
    set_weight = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_set_weight)
    set_mom = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_set_mom)
    reset = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_reset)
    ConvertToPseudoJet = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_ConvertToPseudoJet)
    DistanceSq = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_DistanceSq)
    Distance = _swig_new_instance_method(_nsubjettiness.LightLikeAxis_Distance)
    __swig_destroy__ = _nsubjettiness.delete_LightLikeAxis

# Register LightLikeAxis in _nsubjettiness:
_nsubjettiness.LightLikeAxis_swigregister(LightLikeAxis)

class AxesDefinition(object):
    r"""Proxy of C++ fastjet::contrib::AxesDefinition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    get_starting_axes = _swig_new_instance_method(_nsubjettiness.AxesDefinition_get_starting_axes)
    short_description = _swig_new_instance_method(_nsubjettiness.AxesDefinition_short_description)
    description = _swig_new_instance_method(_nsubjettiness.AxesDefinition_description)
    create = _swig_new_instance_method(_nsubjettiness.AxesDefinition_create)
    get_refined_axes = _swig_new_instance_method(_nsubjettiness.AxesDefinition_get_refined_axes)
    get_axes = _swig_new_instance_method(_nsubjettiness.AxesDefinition_get_axes)
    __call__ = _swig_new_instance_method(_nsubjettiness.AxesDefinition___call__)
    UNDEFINED_REFINE = _nsubjettiness.AxesDefinition_UNDEFINED_REFINE
    
    NO_REFINING = _nsubjettiness.AxesDefinition_NO_REFINING
    
    ONE_PASS = _nsubjettiness.AxesDefinition_ONE_PASS
    
    MULTI_PASS = _nsubjettiness.AxesDefinition_MULTI_PASS
    
    nPass = _swig_new_instance_method(_nsubjettiness.AxesDefinition_nPass)
    givesRandomizedResults = _swig_new_instance_method(_nsubjettiness.AxesDefinition_givesRandomizedResults)
    needsManualAxes = _swig_new_instance_method(_nsubjettiness.AxesDefinition_needsManualAxes)
    setNPass = _swig_new_instance_method(_nsubjettiness.AxesDefinition_setNPass)
    __swig_destroy__ = _nsubjettiness.delete_AxesDefinition

# Register AxesDefinition in _nsubjettiness:
_nsubjettiness.AxesDefinition_swigregister(AxesDefinition)

class ExclusiveJetAxes(AxesDefinition):
    r"""Proxy of C++ fastjet::contrib::ExclusiveJetAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _def):
        r"""__init__(ExclusiveJetAxes self, JetDefinition _def) -> ExclusiveJetAxes"""
        _nsubjettiness.ExclusiveJetAxes_swiginit(self, _nsubjettiness.new_ExclusiveJetAxes(_def))
    get_starting_axes = _swig_new_instance_method(_nsubjettiness.ExclusiveJetAxes_get_starting_axes)
    short_description = _swig_new_instance_method(_nsubjettiness.ExclusiveJetAxes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.ExclusiveJetAxes_description)
    create = _swig_new_instance_method(_nsubjettiness.ExclusiveJetAxes_create)
    __swig_destroy__ = _nsubjettiness.delete_ExclusiveJetAxes

# Register ExclusiveJetAxes in _nsubjettiness:
_nsubjettiness.ExclusiveJetAxes_swigregister(ExclusiveJetAxes)

class ExclusiveCombinatorialJetAxes(AxesDefinition):
    r"""Proxy of C++ fastjet::contrib::ExclusiveCombinatorialJetAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _def, nExtra=0):
        r"""__init__(ExclusiveCombinatorialJetAxes self, JetDefinition _def, int nExtra=0) -> ExclusiveCombinatorialJetAxes"""
        _nsubjettiness.ExclusiveCombinatorialJetAxes_swiginit(self, _nsubjettiness.new_ExclusiveCombinatorialJetAxes(_def, nExtra))
    get_starting_axes = _swig_new_instance_method(_nsubjettiness.ExclusiveCombinatorialJetAxes_get_starting_axes)
    short_description = _swig_new_instance_method(_nsubjettiness.ExclusiveCombinatorialJetAxes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.ExclusiveCombinatorialJetAxes_description)
    create = _swig_new_instance_method(_nsubjettiness.ExclusiveCombinatorialJetAxes_create)
    __swig_destroy__ = _nsubjettiness.delete_ExclusiveCombinatorialJetAxes

# Register ExclusiveCombinatorialJetAxes in _nsubjettiness:
_nsubjettiness.ExclusiveCombinatorialJetAxes_swigregister(ExclusiveCombinatorialJetAxes)

class HardestJetAxes(AxesDefinition):
    r"""Proxy of C++ fastjet::contrib::HardestJetAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _def):
        r"""__init__(HardestJetAxes self, JetDefinition _def) -> HardestJetAxes"""
        _nsubjettiness.HardestJetAxes_swiginit(self, _nsubjettiness.new_HardestJetAxes(_def))
    get_starting_axes = _swig_new_instance_method(_nsubjettiness.HardestJetAxes_get_starting_axes)
    short_description = _swig_new_instance_method(_nsubjettiness.HardestJetAxes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.HardestJetAxes_description)
    create = _swig_new_instance_method(_nsubjettiness.HardestJetAxes_create)
    __swig_destroy__ = _nsubjettiness.delete_HardestJetAxes

# Register HardestJetAxes in _nsubjettiness:
_nsubjettiness.HardestJetAxes_swigregister(HardestJetAxes)

class KT_Axes(ExclusiveJetAxes):
    r"""Proxy of C++ fastjet::contrib::KT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(KT_Axes self) -> KT_Axes"""
        _nsubjettiness.KT_Axes_swiginit(self, _nsubjettiness.new_KT_Axes())
    short_description = _swig_new_instance_method(_nsubjettiness.KT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.KT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.KT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_KT_Axes

# Register KT_Axes in _nsubjettiness:
_nsubjettiness.KT_Axes_swigregister(KT_Axes)

class CA_Axes(ExclusiveJetAxes):
    r"""Proxy of C++ fastjet::contrib::CA_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CA_Axes self) -> CA_Axes"""
        _nsubjettiness.CA_Axes_swiginit(self, _nsubjettiness.new_CA_Axes())
    short_description = _swig_new_instance_method(_nsubjettiness.CA_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.CA_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.CA_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_CA_Axes

# Register CA_Axes in _nsubjettiness:
_nsubjettiness.CA_Axes_swigregister(CA_Axes)

class AntiKT_Axes(HardestJetAxes):
    r"""Proxy of C++ fastjet::contrib::AntiKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, R0):
        r"""__init__(AntiKT_Axes self, double R0) -> AntiKT_Axes"""
        _nsubjettiness.AntiKT_Axes_swiginit(self, _nsubjettiness.new_AntiKT_Axes(R0))
    short_description = _swig_new_instance_method(_nsubjettiness.AntiKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.AntiKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.AntiKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_AntiKT_Axes

# Register AntiKT_Axes in _nsubjettiness:
_nsubjettiness.AntiKT_Axes_swigregister(AntiKT_Axes)

class JetDefinitionWrapper(object):
    r"""Proxy of C++ fastjet::contrib::JetDefinitionWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(JetDefinitionWrapper self, fastjet::JetAlgorithm jet_algorithm_in, double R_in, double xtra_param_in, fastjet::JetDefinition::Recombiner const * recombiner) -> JetDefinitionWrapper
        __init__(JetDefinitionWrapper self, fastjet::JetAlgorithm jet_algorithm_in, double R_in, fastjet::JetDefinition::Recombiner const * recombiner, fastjet::Strategy strategy_in) -> JetDefinitionWrapper
        """
        _nsubjettiness.JetDefinitionWrapper_swiginit(self, _nsubjettiness.new_JetDefinitionWrapper(*args))
    getJetDef = _swig_new_instance_method(_nsubjettiness.JetDefinitionWrapper_getJetDef)
    __swig_destroy__ = _nsubjettiness.delete_JetDefinitionWrapper

# Register JetDefinitionWrapper in _nsubjettiness:
_nsubjettiness.JetDefinitionWrapper_swigregister(JetDefinitionWrapper)

class WTA_KT_Axes(ExclusiveJetAxes):
    r"""Proxy of C++ fastjet::contrib::WTA_KT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(WTA_KT_Axes self) -> WTA_KT_Axes"""
        _nsubjettiness.WTA_KT_Axes_swiginit(self, _nsubjettiness.new_WTA_KT_Axes())
    short_description = _swig_new_instance_method(_nsubjettiness.WTA_KT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.WTA_KT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.WTA_KT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_WTA_KT_Axes

# Register WTA_KT_Axes in _nsubjettiness:
_nsubjettiness.WTA_KT_Axes_swigregister(WTA_KT_Axes)

class WTA_CA_Axes(ExclusiveJetAxes):
    r"""Proxy of C++ fastjet::contrib::WTA_CA_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(WTA_CA_Axes self) -> WTA_CA_Axes"""
        _nsubjettiness.WTA_CA_Axes_swiginit(self, _nsubjettiness.new_WTA_CA_Axes())
    short_description = _swig_new_instance_method(_nsubjettiness.WTA_CA_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.WTA_CA_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.WTA_CA_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_WTA_CA_Axes

# Register WTA_CA_Axes in _nsubjettiness:
_nsubjettiness.WTA_CA_Axes_swigregister(WTA_CA_Axes)

class GenKT_Axes(ExclusiveJetAxes):
    r"""Proxy of C++ fastjet::contrib::GenKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(GenKT_Axes self, double p, double R0=max_allowable_R) -> GenKT_Axes"""
        _nsubjettiness.GenKT_Axes_swiginit(self, _nsubjettiness.new_GenKT_Axes(*args))
    short_description = _swig_new_instance_method(_nsubjettiness.GenKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.GenKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.GenKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_GenKT_Axes

# Register GenKT_Axes in _nsubjettiness:
_nsubjettiness.GenKT_Axes_swigregister(GenKT_Axes)

class WTA_GenKT_Axes(ExclusiveJetAxes):
    r"""Proxy of C++ fastjet::contrib::WTA_GenKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(WTA_GenKT_Axes self, double p, double R0=max_allowable_R) -> WTA_GenKT_Axes"""
        _nsubjettiness.WTA_GenKT_Axes_swiginit(self, _nsubjettiness.new_WTA_GenKT_Axes(*args))
    short_description = _swig_new_instance_method(_nsubjettiness.WTA_GenKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.WTA_GenKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.WTA_GenKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_WTA_GenKT_Axes

# Register WTA_GenKT_Axes in _nsubjettiness:
_nsubjettiness.WTA_GenKT_Axes_swigregister(WTA_GenKT_Axes)

class GenET_GenKT_Axes(ExclusiveJetAxes):
    r"""Proxy of C++ fastjet::contrib::GenET_GenKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(GenET_GenKT_Axes self, double delta, double p, double R0=max_allowable_R) -> GenET_GenKT_Axes"""
        _nsubjettiness.GenET_GenKT_Axes_swiginit(self, _nsubjettiness.new_GenET_GenKT_Axes(*args))
    short_description = _swig_new_instance_method(_nsubjettiness.GenET_GenKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.GenET_GenKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.GenET_GenKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_GenET_GenKT_Axes

# Register GenET_GenKT_Axes in _nsubjettiness:
_nsubjettiness.GenET_GenKT_Axes_swigregister(GenET_GenKT_Axes)

class OnePass_KT_Axes(KT_Axes):
    r"""Proxy of C++ fastjet::contrib::OnePass_KT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OnePass_KT_Axes self) -> OnePass_KT_Axes"""
        _nsubjettiness.OnePass_KT_Axes_swiginit(self, _nsubjettiness.new_OnePass_KT_Axes())
    short_description = _swig_new_instance_method(_nsubjettiness.OnePass_KT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.OnePass_KT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.OnePass_KT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_OnePass_KT_Axes

# Register OnePass_KT_Axes in _nsubjettiness:
_nsubjettiness.OnePass_KT_Axes_swigregister(OnePass_KT_Axes)

class OnePass_CA_Axes(CA_Axes):
    r"""Proxy of C++ fastjet::contrib::OnePass_CA_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OnePass_CA_Axes self) -> OnePass_CA_Axes"""
        _nsubjettiness.OnePass_CA_Axes_swiginit(self, _nsubjettiness.new_OnePass_CA_Axes())
    short_description = _swig_new_instance_method(_nsubjettiness.OnePass_CA_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.OnePass_CA_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.OnePass_CA_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_OnePass_CA_Axes

# Register OnePass_CA_Axes in _nsubjettiness:
_nsubjettiness.OnePass_CA_Axes_swigregister(OnePass_CA_Axes)

class OnePass_AntiKT_Axes(AntiKT_Axes):
    r"""Proxy of C++ fastjet::contrib::OnePass_AntiKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, R0):
        r"""__init__(OnePass_AntiKT_Axes self, double R0) -> OnePass_AntiKT_Axes"""
        _nsubjettiness.OnePass_AntiKT_Axes_swiginit(self, _nsubjettiness.new_OnePass_AntiKT_Axes(R0))
    short_description = _swig_new_instance_method(_nsubjettiness.OnePass_AntiKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.OnePass_AntiKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.OnePass_AntiKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_OnePass_AntiKT_Axes

# Register OnePass_AntiKT_Axes in _nsubjettiness:
_nsubjettiness.OnePass_AntiKT_Axes_swigregister(OnePass_AntiKT_Axes)

class OnePass_WTA_KT_Axes(WTA_KT_Axes):
    r"""Proxy of C++ fastjet::contrib::OnePass_WTA_KT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OnePass_WTA_KT_Axes self) -> OnePass_WTA_KT_Axes"""
        _nsubjettiness.OnePass_WTA_KT_Axes_swiginit(self, _nsubjettiness.new_OnePass_WTA_KT_Axes())
    short_description = _swig_new_instance_method(_nsubjettiness.OnePass_WTA_KT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.OnePass_WTA_KT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.OnePass_WTA_KT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_OnePass_WTA_KT_Axes

# Register OnePass_WTA_KT_Axes in _nsubjettiness:
_nsubjettiness.OnePass_WTA_KT_Axes_swigregister(OnePass_WTA_KT_Axes)

class OnePass_WTA_CA_Axes(WTA_CA_Axes):
    r"""Proxy of C++ fastjet::contrib::OnePass_WTA_CA_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OnePass_WTA_CA_Axes self) -> OnePass_WTA_CA_Axes"""
        _nsubjettiness.OnePass_WTA_CA_Axes_swiginit(self, _nsubjettiness.new_OnePass_WTA_CA_Axes())
    short_description = _swig_new_instance_method(_nsubjettiness.OnePass_WTA_CA_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.OnePass_WTA_CA_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.OnePass_WTA_CA_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_OnePass_WTA_CA_Axes

# Register OnePass_WTA_CA_Axes in _nsubjettiness:
_nsubjettiness.OnePass_WTA_CA_Axes_swigregister(OnePass_WTA_CA_Axes)

class OnePass_GenKT_Axes(GenKT_Axes):
    r"""Proxy of C++ fastjet::contrib::OnePass_GenKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OnePass_GenKT_Axes self, double p, double R0=max_allowable_R) -> OnePass_GenKT_Axes"""
        _nsubjettiness.OnePass_GenKT_Axes_swiginit(self, _nsubjettiness.new_OnePass_GenKT_Axes(*args))
    short_description = _swig_new_instance_method(_nsubjettiness.OnePass_GenKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.OnePass_GenKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.OnePass_GenKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_OnePass_GenKT_Axes

# Register OnePass_GenKT_Axes in _nsubjettiness:
_nsubjettiness.OnePass_GenKT_Axes_swigregister(OnePass_GenKT_Axes)

class OnePass_WTA_GenKT_Axes(WTA_GenKT_Axes):
    r"""Proxy of C++ fastjet::contrib::OnePass_WTA_GenKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OnePass_WTA_GenKT_Axes self, double p, double R0=max_allowable_R) -> OnePass_WTA_GenKT_Axes"""
        _nsubjettiness.OnePass_WTA_GenKT_Axes_swiginit(self, _nsubjettiness.new_OnePass_WTA_GenKT_Axes(*args))
    short_description = _swig_new_instance_method(_nsubjettiness.OnePass_WTA_GenKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.OnePass_WTA_GenKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.OnePass_WTA_GenKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_OnePass_WTA_GenKT_Axes

# Register OnePass_WTA_GenKT_Axes in _nsubjettiness:
_nsubjettiness.OnePass_WTA_GenKT_Axes_swigregister(OnePass_WTA_GenKT_Axes)

class OnePass_GenET_GenKT_Axes(GenET_GenKT_Axes):
    r"""Proxy of C++ fastjet::contrib::OnePass_GenET_GenKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OnePass_GenET_GenKT_Axes self, double delta, double p, double R0=max_allowable_R) -> OnePass_GenET_GenKT_Axes"""
        _nsubjettiness.OnePass_GenET_GenKT_Axes_swiginit(self, _nsubjettiness.new_OnePass_GenET_GenKT_Axes(*args))
    short_description = _swig_new_instance_method(_nsubjettiness.OnePass_GenET_GenKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.OnePass_GenET_GenKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.OnePass_GenET_GenKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_OnePass_GenET_GenKT_Axes

# Register OnePass_GenET_GenKT_Axes in _nsubjettiness:
_nsubjettiness.OnePass_GenET_GenKT_Axes_swigregister(OnePass_GenET_GenKT_Axes)

class Manual_Axes(AxesDefinition):
    r"""Proxy of C++ fastjet::contrib::Manual_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Manual_Axes self) -> Manual_Axes"""
        _nsubjettiness.Manual_Axes_swiginit(self, _nsubjettiness.new_Manual_Axes())
    get_starting_axes = _swig_new_instance_method(_nsubjettiness.Manual_Axes_get_starting_axes)
    short_description = _swig_new_instance_method(_nsubjettiness.Manual_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.Manual_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.Manual_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_Manual_Axes

# Register Manual_Axes in _nsubjettiness:
_nsubjettiness.Manual_Axes_swigregister(Manual_Axes)

class OnePass_Manual_Axes(Manual_Axes):
    r"""Proxy of C++ fastjet::contrib::OnePass_Manual_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OnePass_Manual_Axes self) -> OnePass_Manual_Axes"""
        _nsubjettiness.OnePass_Manual_Axes_swiginit(self, _nsubjettiness.new_OnePass_Manual_Axes())
    short_description = _swig_new_instance_method(_nsubjettiness.OnePass_Manual_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.OnePass_Manual_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.OnePass_Manual_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_OnePass_Manual_Axes

# Register OnePass_Manual_Axes in _nsubjettiness:
_nsubjettiness.OnePass_Manual_Axes_swigregister(OnePass_Manual_Axes)

class MultiPass_Axes(KT_Axes):
    r"""Proxy of C++ fastjet::contrib::MultiPass_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Npass):
        r"""__init__(MultiPass_Axes self, unsigned int Npass) -> MultiPass_Axes"""
        _nsubjettiness.MultiPass_Axes_swiginit(self, _nsubjettiness.new_MultiPass_Axes(Npass))
    short_description = _swig_new_instance_method(_nsubjettiness.MultiPass_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.MultiPass_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.MultiPass_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_MultiPass_Axes

# Register MultiPass_Axes in _nsubjettiness:
_nsubjettiness.MultiPass_Axes_swigregister(MultiPass_Axes)

class MultiPass_Manual_Axes(Manual_Axes):
    r"""Proxy of C++ fastjet::contrib::MultiPass_Manual_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Npass):
        r"""__init__(MultiPass_Manual_Axes self, unsigned int Npass) -> MultiPass_Manual_Axes"""
        _nsubjettiness.MultiPass_Manual_Axes_swiginit(self, _nsubjettiness.new_MultiPass_Manual_Axes(Npass))
    short_description = _swig_new_instance_method(_nsubjettiness.MultiPass_Manual_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.MultiPass_Manual_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.MultiPass_Manual_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_MultiPass_Manual_Axes

# Register MultiPass_Manual_Axes in _nsubjettiness:
_nsubjettiness.MultiPass_Manual_Axes_swigregister(MultiPass_Manual_Axes)

class Comb_GenKT_Axes(ExclusiveCombinatorialJetAxes):
    r"""Proxy of C++ fastjet::contrib::Comb_GenKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Comb_GenKT_Axes self, int nExtra, double p, double R0=max_allowable_R) -> Comb_GenKT_Axes"""
        _nsubjettiness.Comb_GenKT_Axes_swiginit(self, _nsubjettiness.new_Comb_GenKT_Axes(*args))
    short_description = _swig_new_instance_method(_nsubjettiness.Comb_GenKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.Comb_GenKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.Comb_GenKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_Comb_GenKT_Axes

# Register Comb_GenKT_Axes in _nsubjettiness:
_nsubjettiness.Comb_GenKT_Axes_swigregister(Comb_GenKT_Axes)

class Comb_WTA_GenKT_Axes(ExclusiveCombinatorialJetAxes):
    r"""Proxy of C++ fastjet::contrib::Comb_WTA_GenKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Comb_WTA_GenKT_Axes self, int nExtra, double p, double R0=max_allowable_R) -> Comb_WTA_GenKT_Axes"""
        _nsubjettiness.Comb_WTA_GenKT_Axes_swiginit(self, _nsubjettiness.new_Comb_WTA_GenKT_Axes(*args))
    short_description = _swig_new_instance_method(_nsubjettiness.Comb_WTA_GenKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.Comb_WTA_GenKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.Comb_WTA_GenKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_Comb_WTA_GenKT_Axes

# Register Comb_WTA_GenKT_Axes in _nsubjettiness:
_nsubjettiness.Comb_WTA_GenKT_Axes_swigregister(Comb_WTA_GenKT_Axes)

class Comb_GenET_GenKT_Axes(ExclusiveCombinatorialJetAxes):
    r"""Proxy of C++ fastjet::contrib::Comb_GenET_GenKT_Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Comb_GenET_GenKT_Axes self, int nExtra, double delta, double p, double R0=max_allowable_R) -> Comb_GenET_GenKT_Axes"""
        _nsubjettiness.Comb_GenET_GenKT_Axes_swiginit(self, _nsubjettiness.new_Comb_GenET_GenKT_Axes(*args))
    short_description = _swig_new_instance_method(_nsubjettiness.Comb_GenET_GenKT_Axes_short_description)
    description = _swig_new_instance_method(_nsubjettiness.Comb_GenET_GenKT_Axes_description)
    create = _swig_new_instance_method(_nsubjettiness.Comb_GenET_GenKT_Axes_create)
    __swig_destroy__ = _nsubjettiness.delete_Comb_GenET_GenKT_Axes

# Register Comb_GenET_GenKT_Axes in _nsubjettiness:
_nsubjettiness.Comb_GenET_GenKT_Axes_swigregister(Comb_GenET_GenKT_Axes)

class Njettiness(object):
    r"""Proxy of C++ fastjet::contrib::Njettiness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsubjettiness.delete_Njettiness
    setAxes = _swig_new_instance_method(_nsubjettiness.Njettiness_setAxes)
    getTauComponents = _swig_new_instance_method(_nsubjettiness.Njettiness_getTauComponents)
    getTau = _swig_new_instance_method(_nsubjettiness.Njettiness_getTau)
    currentTauComponents = _swig_new_instance_method(_nsubjettiness.Njettiness_currentTauComponents)
    currentAxes = _swig_new_instance_method(_nsubjettiness.Njettiness_currentAxes)
    seedAxes = _swig_new_instance_method(_nsubjettiness.Njettiness_seedAxes)
    currentJets = _swig_new_instance_method(_nsubjettiness.Njettiness_currentJets)
    currentBeam = _swig_new_instance_method(_nsubjettiness.Njettiness_currentBeam)
    currentPartition = _swig_new_instance_method(_nsubjettiness.Njettiness_currentPartition)
    kt_axes = _nsubjettiness.Njettiness_kt_axes
    
    ca_axes = _nsubjettiness.Njettiness_ca_axes
    
    antikt_0p2_axes = _nsubjettiness.Njettiness_antikt_0p2_axes
    
    wta_kt_axes = _nsubjettiness.Njettiness_wta_kt_axes
    
    wta_ca_axes = _nsubjettiness.Njettiness_wta_ca_axes
    
    onepass_kt_axes = _nsubjettiness.Njettiness_onepass_kt_axes
    
    onepass_ca_axes = _nsubjettiness.Njettiness_onepass_ca_axes
    
    onepass_antikt_0p2_axes = _nsubjettiness.Njettiness_onepass_antikt_0p2_axes
    
    onepass_wta_kt_axes = _nsubjettiness.Njettiness_onepass_wta_kt_axes
    
    onepass_wta_ca_axes = _nsubjettiness.Njettiness_onepass_wta_ca_axes
    
    min_axes = _nsubjettiness.Njettiness_min_axes
    
    manual_axes = _nsubjettiness.Njettiness_manual_axes
    
    onepass_manual_axes = _nsubjettiness.Njettiness_onepass_manual_axes
    
    normalized_measure = _nsubjettiness.Njettiness_normalized_measure
    
    unnormalized_measure = _nsubjettiness.Njettiness_unnormalized_measure
    
    geometric_measure = _nsubjettiness.Njettiness_geometric_measure
    
    normalized_cutoff_measure = _nsubjettiness.Njettiness_normalized_cutoff_measure
    
    unnormalized_cutoff_measure = _nsubjettiness.Njettiness_unnormalized_cutoff_measure
    
    geometric_cutoff_measure = _nsubjettiness.Njettiness_geometric_cutoff_measure
    

    def __init__(self, *args):
        r"""
        __init__(Njettiness self, AxesDefinition axes_def, MeasureDefinition measure_def) -> Njettiness
        __init__(Njettiness self, fastjet::contrib::Njettiness::AxesMode axes_mode, MeasureDefinition measure_def) -> Njettiness
        __init__(Njettiness self, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, int num_para, double para1=std::numeric_limits< double >::quiet_NaN(), double para2=std::numeric_limits< double >::quiet_NaN(), double para3=std::numeric_limits< double >::quiet_NaN()) -> Njettiness
        """
        _nsubjettiness.Njettiness_swiginit(self, _nsubjettiness.new_Njettiness(*args))
    createAxesDef = _swig_new_instance_method(_nsubjettiness.Njettiness_createAxesDef)
    createMeasureDef = _swig_new_instance_method(_nsubjettiness.Njettiness_createMeasureDef)

# Register Njettiness in _nsubjettiness:
_nsubjettiness.Njettiness_swigregister(Njettiness)

class Nsubjettiness(fastjet.FunctionOfPseudoJetDouble):
    r"""Proxy of C++ fastjet::contrib::Nsubjettiness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = _swig_new_instance_method(_nsubjettiness.Nsubjettiness_result)
    component_result = _swig_new_instance_method(_nsubjettiness.Nsubjettiness_component_result)
    setAxes = _swig_new_instance_method(_nsubjettiness.Nsubjettiness_setAxes)
    seedAxes = _swig_new_instance_method(_nsubjettiness.Nsubjettiness_seedAxes)
    currentAxes = _swig_new_instance_method(_nsubjettiness.Nsubjettiness_currentAxes)
    currentSubjets = _swig_new_instance_method(_nsubjettiness.Nsubjettiness_currentSubjets)
    currentTauComponents = _swig_new_instance_method(_nsubjettiness.Nsubjettiness_currentTauComponents)
    currentPartition = _swig_new_instance_method(_nsubjettiness.Nsubjettiness_currentPartition)

    def __init__(self, *args):
        r"""
        __init__(Nsubjettiness self, int N, AxesDefinition axes_def, MeasureDefinition measure_def) -> Nsubjettiness
        __init__(Nsubjettiness self, int N, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode) -> Nsubjettiness
        __init__(Nsubjettiness self, int N, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, double para1) -> Nsubjettiness
        __init__(Nsubjettiness self, int N, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, double para1, double para2) -> Nsubjettiness
        __init__(Nsubjettiness self, int N, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, double para1, double para2, double para3) -> Nsubjettiness
        __init__(Nsubjettiness self, int N, fastjet::contrib::Njettiness::AxesMode axes_mode, double beta, double R0, double Rcutoff=std::numeric_limits< double >::max()) -> Nsubjettiness
        """
        _nsubjettiness.Nsubjettiness_swiginit(self, _nsubjettiness.new_Nsubjettiness(*args))
    __swig_destroy__ = _nsubjettiness.delete_Nsubjettiness

# Register Nsubjettiness in _nsubjettiness:
_nsubjettiness.Nsubjettiness_swigregister(Nsubjettiness)

class NsubjettinessRatio(fastjet.FunctionOfPseudoJetDouble):
    r"""Proxy of C++ fastjet::contrib::NsubjettinessRatio class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = _swig_new_instance_method(_nsubjettiness.NsubjettinessRatio_result)

    def __init__(self, *args):
        r"""
        __init__(NsubjettinessRatio self, int N, int M, AxesDefinition axes_def, MeasureDefinition measure_def) -> NsubjettinessRatio
        __init__(NsubjettinessRatio self, int N, int M, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode) -> NsubjettinessRatio
        __init__(NsubjettinessRatio self, int N, int M, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, double para1) -> NsubjettinessRatio
        __init__(NsubjettinessRatio self, int N, int M, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, double para1, double para2) -> NsubjettinessRatio
        __init__(NsubjettinessRatio self, int N, int M, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, double para1, double para2, double para3) -> NsubjettinessRatio
        """
        _nsubjettiness.NsubjettinessRatio_swiginit(self, _nsubjettiness.new_NsubjettinessRatio(*args))
    __swig_destroy__ = _nsubjettiness.delete_NsubjettinessRatio

# Register NsubjettinessRatio in _nsubjettiness:
_nsubjettiness.NsubjettinessRatio_swigregister(NsubjettinessRatio)

class NjettinessPlugin(object):
    r"""Proxy of C++ fastjet::contrib::NjettinessPlugin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    description = _swig_new_instance_method(_nsubjettiness.NjettinessPlugin_description)
    R = _swig_new_instance_method(_nsubjettiness.NjettinessPlugin_R)
    run_clustering = _swig_new_instance_method(_nsubjettiness.NjettinessPlugin_run_clustering)
    setAxes = _swig_new_instance_method(_nsubjettiness.NjettinessPlugin_setAxes)
    __swig_destroy__ = _nsubjettiness.delete_NjettinessPlugin

    def __init__(self, *args):
        r"""
        __init__(NjettinessPlugin self, int N, AxesDefinition axes_def, MeasureDefinition measure_def) -> NjettinessPlugin
        __init__(NjettinessPlugin self, int N, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode) -> NjettinessPlugin
        __init__(NjettinessPlugin self, int N, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, double para1) -> NjettinessPlugin
        __init__(NjettinessPlugin self, int N, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, double para1, double para2) -> NjettinessPlugin
        __init__(NjettinessPlugin self, int N, fastjet::contrib::Njettiness::AxesMode axes_mode, fastjet::contrib::Njettiness::MeasureMode measure_mode, double para1, double para2, double para3) -> NjettinessPlugin
        __init__(NjettinessPlugin self, int N, fastjet::contrib::Njettiness::AxesMode mode, double beta, double R0, double Rcutoff=std::numeric_limits< double >::max()) -> NjettinessPlugin
        """
        _nsubjettiness.NjettinessPlugin_swiginit(self, _nsubjettiness.new_NjettinessPlugin(*args))

# Register NjettinessPlugin in _nsubjettiness:
_nsubjettiness.NjettinessPlugin_swigregister(NjettinessPlugin)

class XConePlugin(NjettinessPlugin):
    r"""Proxy of C++ fastjet::contrib::XConePlugin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, N, R0, beta=2.0):
        r"""__init__(XConePlugin self, int N, double R0, double beta=2.0) -> XConePlugin"""
        _nsubjettiness.XConePlugin_swiginit(self, _nsubjettiness.new_XConePlugin(N, R0, beta))
    description = _swig_new_instance_method(_nsubjettiness.XConePlugin_description)
    R = _swig_new_instance_method(_nsubjettiness.XConePlugin_R)
    __swig_destroy__ = _nsubjettiness.delete_XConePlugin

# Register XConePlugin in _nsubjettiness:
_nsubjettiness.XConePlugin_swigregister(XConePlugin)

class PseudoXConePlugin(NjettinessPlugin):
    r"""Proxy of C++ fastjet::contrib::PseudoXConePlugin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, N, R0, beta=2.0):
        r"""__init__(PseudoXConePlugin self, int N, double R0, double beta=2.0) -> PseudoXConePlugin"""
        _nsubjettiness.PseudoXConePlugin_swiginit(self, _nsubjettiness.new_PseudoXConePlugin(N, R0, beta))
    description = _swig_new_instance_method(_nsubjettiness.PseudoXConePlugin_description)
    R = _swig_new_instance_method(_nsubjettiness.PseudoXConePlugin_R)
    __swig_destroy__ = _nsubjettiness.delete_PseudoXConePlugin

# Register PseudoXConePlugin in _nsubjettiness:
_nsubjettiness.PseudoXConePlugin_swigregister(PseudoXConePlugin)



